/*
  Created by: James Lemieux
  File Name: cm.cup
  To Build: java java_cup.Main < cm.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    public void report_error(String message, Object info) {
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal ASSIGN, EQ, NOTEQ, LT, GT, GTEQ, LTEQ, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, SEMI, COMMA, LCB, RCB, LSB, RSB, GE, MUL ;
terminal String ID, NUM;
terminal IF, ELSE, WHILE, VOID, RETURN, INT;
terminal ERROR;

non terminal VarDec params, param, variable_declaration;
non terminal Exp statement, expression, simple_expression, expression_stmt, selection_stmt, iteration_stmt, return_stmt, additive_expression, term, factor, call;
non terminal CompoundExp compound_statement;
non terminal Declaration declaration, function_declaration;
non terminal Exp program1;
non terminal TypeName type_specifier;
non terminal DeclarationList program, declaration_list;
non terminal VarDecList param_list, local_declarations;
non terminal ExpList statement_list, args, arg_list;
non terminal Integer addop, mulop;
non terminal Var var;

/*precedence*/
precedence right ASSIGN;
precedence left COMMA, ELSE, ERROR;
precedence nonassoc EQ, NOTEQ, LT, LTEQ, GT, GTEQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;

/* ----------------------------Grammar Section-------------------- */ 
start with program;

program             ::= declaration_list:dl
                     {: RESULT = dl; :}
                     | error:ee
                        {:parser.report_error("Invalid file definition", ee); :}
                    ;

type_specifier      ::= INT:i
                     {: RESULT = new TypeName(ileft, iright, TypeName.INT); :}
                    | VOID:v
                     {: RESULT = new TypeName(vleft, vright, TypeName.VOID); :}
                    ;

declaration_list    ::= declaration_list:d1 declaration:d2
                     {: 
                        DeclarationList t = d1;
                        while( t.tail != null)
                           t = t.tail;
                        t.tail = new DeclarationList(d2left, d2right, d2, null);
                        RESULT = d1;
                     :}
                    | declaration:d
                     {: RESULT = new DeclarationList(dleft, dright, d, null); :}
                    | COMMA declaration:d3
                     {: parser.report_error("Invalid decleration list comman seperation", d3);
                        RESULT = new DeclarationList(d3left, d3right, d3, null);
                     :}
                    | error:e
                     {: parser.report_error("Incorrect structure in the declaration_list.", e);
                        RESULT = new DeclarationList(eleft, eright, null, null);

                     :}
                    ;

declaration         ::= variable_declaration:v
                     {: RESULT = v; :}
                    | function_declaration:fu
                     {: RESULT = fu; :}
                    ;

function_declaration ::= type_specifier:t ID:i LPAREN param_list:p RPAREN compound_statement:c 
                     {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); :}
                     | type_specifier:t2 ID:i2 LPAREN VOID RPAREN compound_statement:c2
                     {: RESULT = new FunctionDec(t2left, t2right, t2, i2, null, c2); :}
                     | type_specifier:t2 ID:i3 LPAREN RPAREN compound_statement:c3
                     {: RESULT = new FunctionDec(i3left, i3right, t2, i3, null, c3); :}
                    ;

variable_declaration ::= type_specifier:t ID:i SEMI
                     {: RESULT = new VariableDeclaration(tleft, tright, t, i); :}

                    | type_specifier:t ID:i LSB NUM:n RSB SEMI
                     {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(nleft, nright, n)); :}
                    | type_specifier:t ID:i LSB RSB SEMI
                     {: parser.report_error("Invalid array index value", i);
                     RESULT = new ArrayDec(tleft, tright, t, i, null); :}
                    | ID:i LSB NUM:n RSB SEMI
                     {: parser.report_error("Invalid array decleration", i);
                        RESULT = new ArrayDec(ileft, iright, null, i, null);
                     :}
                    | ID:i LSB RSB SEMI
                    ;

local_declarations  ::= local_declarations:lds variable_declaration:vd
                     {: VarDecList v = lds;
                        while(v.tail != null)
                           v = v.tail;
                        v.tail = new VarDecList(vd, null);
                        RESULT = lds;
                      :}
                    | variable_declaration:vd2
                     {: RESULT = new VarDecList(vd2, null); :}
                    | error:e variable_declaration:vd3
                     {: parser.report_error("Invalid structure in local_declarations", e);
                        RESULT = new VarDecList(vd3, null); 
                      :}
                    ;

compound_statement  ::= LCB:l local_declarations:ld statement_list:sl RCB
                     {: RESULT = new CompoundExp(lleft, lright, ld, sl); :}
                    | LCB:l2 local_declarations:ld RCB
                     {: RESULT = new CompoundExp(l2left, l2right, ld, null); :}
                    | LCB:l3 statement_list:sl2 RCB
                     {: RESULT = new CompoundExp(l3left, l3right, null, sl2); :}
                    | LCB:l4 RCB
                     {: RESULT = new CompoundExp(l4left, l4right, null, null); :}
                    ;

statement_list      ::= statement_list:sl statement:s
                     {: ExpList v = sl; 
                        while (v.tail != null)
                           v = v.tail;
                        v.tail = new ExpList(sleft, sright, s, null);
                        RESULT = sl;
                     :}
                    | statement:s
                     {: RESULT = new ExpList(sleft, sright, s, null); :}
                    ;

param               ::= type_specifier:t ID:i
                     {: RESULT = new VariableDeclaration(tleft, tright, t, i); :}
                    | type_specifier:t ID:i LSB RSB
                     {: RESULT = new VariableDeclaration(tleft, tright, t, i); :}
                    ;

param_list          ::= param_list:p1 COMMA param:p2
                     {: VarDecList t = p1;
                        while(t.tail != null)
                           t = t.tail;
                        t.tail = new VarDecList(p2, null);
                        RESULT = p1;   
                     :}
                    | param:p1
                     {: RESULT = new VarDecList(p1, null); :}
                    | COMMA param:p3
                     {:parser.report_error("Invalid param list in function", p3);
                        RESULT = new VarDecList(p3, null);
                     :}
                    | error:e
                     {:
                        parser.report_error("Incorrect structure in param_list", e);
                        RESULT = new VarDecList(null, null);
                     :}
                    ;

statement           ::= expression:es SEMI
                     {:RESULT = es; :}
                    | compound_statement:cs
                     {:RESULT = cs; :}
                    | selection_stmt:ss
                     {:RESULT = ss; :}
                    | iteration_stmt:is
                     {: RESULT = is; :}
                    | return_stmt:rs
                     {: RESULT = rs; :}
                    | SEMI
                    ;

selection_stmt      ::= IF LPAREN expression:e RPAREN statement:s1
                     {: RESULT = new IfExp(eleft, eright, e, s1, null); :}
                    | IF LPAREN expression:e RPAREN statement:s2 ELSE statement:s3
                     {: RESULT = new IfExp(eleft, eright, e, s2, s3); :}
                    | IF:i LPAREN RPAREN statement:s1
                     {: parser.report_error("Invalid If condition", i); 
                        RESULT = new IfExp(ileft, iright, null, s1, null);
                     :}
                    ;

iteration_stmt      ::= WHILE:w LPAREN expression:e RPAREN statement:s
                     {: RESULT = new WhileExp(wleft, wright, e, s); :}
                     | WHILE:w LPAREN RPAREN statement:s
                     {: parser.report_error("Invalid While condition", w); 
                        RESULT = new WhileExp(wleft, wright, null, s);
                     :}
                    ;

return_stmt         ::= RETURN:r expression:e SEMI
                     {: RESULT = new ReturnExp(rleft, rright, e); :}
                    | RETURN:r SEMI
                     {: RESULT = new ReturnExp(rleft, rright, null); :}
                    ;

expression          ::= variable_declaration:v ASSIGN expression:e
                     {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); :}
                    | var:v ASSIGN call:c
                     {: RESULT = new VarAssignExp(vleft, vright, v, c); :}
                    | expression:aa1 LT expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.LT, aa2); :}
                    | var:v ASSIGN expression:aa2
                     {: RESULT = new VarAssignExp(vleft, vright, v, aa2); :} 
                    | expression:aa1 LTEQ expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.LTEQ, aa2); :}
                    | expression:aa1 GT expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.GT, aa2); :}
                    | expression:aa1 GTEQ expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.GTEQ, aa2); :}
                    | expression:aa1 PLUS expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.PLUS, aa2); :}
                    | expression:aa1 MINUS expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.MINUS, aa2); :}
                    | expression:aa1 TIMES expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.TIMES, aa2); :}
                    | expression:aa1 OVER expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.OVER, aa2); :}
                    | expression:aa1 EQ expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.EQ, aa2); :}
                    | expression:aa1 NOTEQ expression:aa2
                     {: RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.NOTEQ, aa2); :}
                    | expression:aa1 ERROR:e expression:aa2
                     {: parser.report_error("Invalid symbol in expression", e);
                        RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.ERROR, aa2);
                     :}
                    | factor:f
                     {: RESULT = f; :}
                    ;

addop               ::= PLUS:p
                     {: RESULT = OpExp.PLUS; :}
                    | MINUS
                     {: RESULT = OpExp.MINUS; :}
                    ;

term                ::= term:t TIMES:i factor:f
                     {: RESULT = new OpExp(tleft, tright, t, OpExp.MUL, f); :}
                    | term:t OVER:i factor:f
                     {: RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); :}
                    | factor:f
                     {: RESULT = f; :}
                    ;

var                 ::= ID:i
                        {:RESULT = new SimpleVar(ileft, iright, i); :}
                     | ID:i LSB expression:e RSB
                        {:RESULT = new SimpleIndexVar(ileft, iright, i, e); :}
                     ;

factor              ::= LPAREN expression:ex RPAREN
                     {: RESULT = ex; :}
                    | call: c
                     {: RESULT = c; :}
                    | var:v
                     {: RESULT = new SimpleVarExp(vleft, vright, v); :}
                    | NUM:n
                     {: RESULT = new IntExp(nleft, nright, n); :}
                    ;

call                ::= ID:i LPAREN arg_list:a RPAREN
                     {: RESULT = new CallingExp(ileft, iright, i, a); :}
                     | ID: i1 LPAREN RPAREN
                     {: RESULT = new CallingExp(i1left, i1right, i1, null); :}
                     | LPAREN:i RPAREN
                        {:parser.report_error("No calling function Id", i);
                           RESULT = new CallingExp(ileft, iright, null, null);
                        :}
                    ;

arg_list            ::= arg_list:ex1 COMMA expression:ex2
                     {: ExpList t = ex1;
                        while( t.tail != null)
                           t = t.tail;
                        t.tail = new ExpList(ex1left, ex1right, ex2, null);
                        RESULT = ex1;
                     :}
                    | expression:e
                     {: RESULT = new ExpList(eleft, eright, e, null); :}
                    | error:ee
                     {: parser.report_error("Incorrect comma spaced delimeters", ee);
                        RESULT = new ExpList(eeleft, eeright, null, null);
                     :} 
                    ;