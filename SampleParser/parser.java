
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\025\003\000\002\025" +
    "\003\000\002\024\003\000\002\024\003\000\002\026\004" +
    "\000\002\026\003\000\002\026\004\000\002\026\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\010\000\002" +
    "\022\010\000\002\022\007\000\002\004\005\000\002\004" +
    "\010\000\002\004\007\000\002\030\004\000\002\030\003" +
    "\000\002\030\004\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\004\000\002\031\004\000\002" +
    "\031\003\000\002\003\004\000\002\003\006\000\002\027" +
    "\005\000\002\027\003\000\002\027\004\000\002\027\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\011\007\000\002\011\011\000\002\011\006\000\002\012" +
    "\007\000\002\012\006\000\002\013\005\000\002\013\004" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\003\000\002\034\003\000\002" +
    "\034\006\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\017\005" +
    "\000\002\017\004\000\002\033\005\000\002\033\003\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\012\003\013\022\014\036\007\040\004\001" +
    "\002\000\004\031\ufffe\001\002\000\010\002\ufffb\036\ufffb" +
    "\040\ufffb\001\002\000\010\002\ufff7\036\ufff7\040\ufff7\001" +
    "\002\000\004\031\ufffd\001\002\000\004\002\206\001\002" +
    "\000\010\002\000\036\007\040\004\001\002\000\004\031" +
    "\017\001\002\000\010\002\uffff\036\ufff9\040\ufff9\001\002" +
    "\000\006\036\007\040\004\001\002\000\010\002\ufff8\036" +
    "\ufff8\040\ufff8\001\002\000\010\002\ufffa\036\ufffa\040\ufffa" +
    "\001\002\000\010\017\022\021\021\025\020\001\002\000" +
    "\006\026\201\032\200\001\002\000\034\002\ufff3\004\ufff3" +
    "\017\ufff3\021\ufff3\023\ufff3\024\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\001\002\000\014" +
    "\003\026\020\025\022\023\036\031\040\004\001\002\000" +
    "\006\036\007\040\004\001\002\000\006\020\174\022\173" +
    "\001\002\000\004\023\033\001\002\000\006\020\uffe2\022" +
    "\uffe2\001\002\000\006\020\uffe4\022\uffe4\001\002\000\004" +
    "\031\167\001\002\000\006\020\032\031\ufffd\001\002\000" +
    "\004\023\033\001\002\000\032\003\056\017\044\021\040" +
    "\023\033\024\060\031\046\032\047\033\043\035\041\036" +
    "\007\037\042\040\004\001\002\000\010\002\ufff5\036\ufff5" +
    "\040\ufff5\001\002\000\004\031\166\001\002\000\030\017" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\030\017" +
    "\044\021\040\023\033\024\164\031\046\032\047\033\043" +
    "\035\041\036\007\037\042\040\004\001\002\000\032\017" +
    "\uffdc\021\uffdc\023\uffdc\024\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\004\017\154\001\002\000\016\017\044\021\151\031\046" +
    "\032\047\036\007\040\004\001\002\000\004\017\141\001" +
    "\002\000\016\017\044\020\137\031\046\032\047\036\007" +
    "\040\004\001\002\000\032\017\uffe0\021\uffe0\023\uffe0\024" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\001\002\000\046\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\124\020\uffc2\021\uffc2\022\uffc2\025" +
    "\123\026\uffc2\041\uffc2\001\002\000\040\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\026\uffbd\041\uffbd" +
    "\001\002\000\030\017\044\021\040\023\033\024\122\031" +
    "\046\032\047\033\043\035\041\036\007\037\042\040\004" +
    "\001\002\000\032\017\uffdd\021\uffdd\023\uffdd\024\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\001\002\000\032\005\076\006\073\007\103\010" +
    "\100\011\072\012\102\013\075\014\071\015\101\016\077" +
    "\021\120\041\074\001\002\000\032\004\067\017\uffef\021" +
    "\uffef\023\uffef\024\uffef\031\uffef\032\uffef\033\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\001\002\000\040\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\041" +
    "\uffc6\001\002\000\032\017\uffdf\021\uffdf\023\uffdf\024\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\001\002\000\006\036\007\040\004\001\002" +
    "\000\032\017\uffde\021\uffde\023\uffde\024\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\001\002\000\034\002\uffea\017\uffea\021\uffea\023\uffea\024" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\001\002\000\040\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\021\uffbf\022\uffbf\026\uffbf\041\uffbf\001" +
    "\002\000\042\004\063\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\026\uffbe\041\uffbe\001\002\000\014" +
    "\017\044\031\046\032\047\036\007\040\004\001\002\000" +
    "\040\005\076\006\073\007\103\010\100\011\072\012\102" +
    "\013\075\014\071\015\101\016\077\020\uffd1\021\uffd1\022" +
    "\uffd1\026\uffd1\041\074\001\002\000\004\004\067\001\002" +
    "\000\040\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\026\uffd3\041\uffd3\001\002\000\014\017\044\031" +
    "\046\032\047\036\007\040\004\001\002\000\040\005\076" +
    "\006\073\007\103\010\100\011\072\012\102\013\075\014" +
    "\071\015\101\016\077\020\uffd4\021\uffd4\022\uffd4\026\uffd4" +
    "\041\074\001\002\000\014\017\044\031\046\032\047\036" +
    "\007\040\004\001\002\000\014\017\044\031\046\032\047" +
    "\036\007\040\004\001\002\000\014\017\044\031\046\032" +
    "\047\036\007\040\004\001\002\000\014\017\044\031\046" +
    "\032\047\036\007\040\004\001\002\000\014\017\044\031" +
    "\046\032\047\036\007\040\004\001\002\000\014\017\044" +
    "\031\046\032\047\036\007\040\004\001\002\000\014\017" +
    "\044\031\046\032\047\036\007\040\004\001\002\000\014" +
    "\017\044\031\046\032\047\036\007\040\004\001\002\000" +
    "\014\017\044\031\046\032\047\036\007\040\004\001\002" +
    "\000\014\017\044\031\046\032\047\036\007\040\004\001" +
    "\002\000\014\017\044\031\046\032\047\036\007\040\004" +
    "\001\002\000\024\013\075\014\071\015\101\016\077\020" +
    "\uffd2\021\uffd2\022\uffd2\026\uffd2\041\uffd2\001\002\000\024" +
    "\013\075\014\071\015\101\016\077\020\uffd0\021\uffd0\022" +
    "\uffd0\026\uffd0\041\uffd0\001\002\000\040\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb\041\uffcb" +
    "\001\002\000\024\013\075\014\071\015\101\016\077\020" +
    "\uffcf\021\uffcf\022\uffcf\026\uffcf\041\uffcf\001\002\000\040" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca" +
    "\026\uffca\041\uffca\001\002\000\024\013\075\014\071\015" +
    "\101\016\077\020\uffc9\021\uffc9\022\uffc9\026\uffc9\041\uffc9" +
    "\001\002\000\040\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\101\016\077\020\uffcd" +
    "\021\uffcd\022\uffcd\026\uffcd\041\uffcd\001\002\000\040\005" +
    "\076\006\073\007\103\010\100\011\072\012\102\013\075" +
    "\014\071\015\101\016\077\020\uffc7\021\uffc7\022\uffc7\026" +
    "\uffc7\041\uffc7\001\002\000\024\013\075\014\071\015\101" +
    "\016\077\020\uffc8\021\uffc8\022\uffc8\026\uffc8\041\uffc8\001" +
    "\002\000\024\013\075\014\071\015\101\016\077\020\uffce" +
    "\021\uffce\022\uffce\026\uffce\041\uffce\001\002\000\040\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\101\016\077\020\uffcc\021\uffcc\022\uffcc\026" +
    "\uffcc\041\uffcc\001\002\000\030\017\uffee\021\uffee\023\uffee" +
    "\024\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\032\017\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\030\017\uffe9\021\uffe9" +
    "\023\uffe9\024\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\001\002\000\034\002\uffeb\017\uffeb" +
    "\021\uffeb\023\uffeb\024\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002\000\014" +
    "\017\044\031\046\032\047\036\007\040\004\001\002\000" +
    "\020\003\127\017\044\020\130\031\046\032\047\036\007" +
    "\040\004\001\002\000\006\020\132\022\131\001\002\000" +
    "\034\005\076\006\073\007\103\010\100\011\072\012\102" +
    "\013\075\014\071\015\101\016\077\020\uffb8\022\uffb8\041" +
    "\074\001\002\000\006\020\uffb7\022\uffb7\001\002\000\040" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\026\uffbb\041\uffbb\001\002\000\014\017\044\031\046\032" +
    "\047\036\007\040\004\001\002\000\040\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\026\uffbc\041\uffbc" +
    "\001\002\000\034\005\076\006\073\007\103\010\100\011" +
    "\072\012\102\013\075\014\071\015\101\016\077\020\uffb9" +
    "\022\uffb9\041\074\001\002\000\032\005\076\006\073\007" +
    "\103\010\100\011\072\012\102\013\075\014\071\015\101" +
    "\016\077\026\135\041\074\001\002\000\042\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\026" +
    "\uffc1\041\uffc1\001\002\000\032\005\076\006\073\007\103" +
    "\010\100\011\072\012\102\013\075\014\071\015\101\016" +
    "\077\020\140\041\074\001\002\000\040\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\020\uffba\021\uffba\022\uffba\026\uffba\041\uffba" +
    "\001\002\000\040\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\026\uffc0\041\uffc0\001\002\000\016\017" +
    "\044\020\143\031\046\032\047\036\007\040\004\001\002" +
    "\000\032\005\076\006\073\007\103\010\100\011\072\012" +
    "\102\013\075\014\071\015\101\016\077\020\145\041\074" +
    "\001\002\000\026\017\044\021\040\023\033\031\046\032" +
    "\047\033\043\035\041\036\007\037\042\040\004\001\002" +
    "\000\032\017\uffd9\021\uffd9\023\uffd9\024\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\001\002\000\026\017\044\021\040\023\033\031\046\032" +
    "\047\033\043\035\041\036\007\037\042\040\004\001\002" +
    "\000\032\017\uffdb\021\uffdb\023\uffdb\024\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\147\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\001\002\000\026\017\044\021\040\023\033\031\046\032" +
    "\047\033\043\035\041\036\007\037\042\040\004\001\002" +
    "\000\032\017\uffda\021\uffda\023\uffda\024\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\001\002\000\032\017\uffd5\021\uffd5\023\uffd5\024\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\001\002\000\032\005\076\006\073\007\103\010" +
    "\100\011\072\012\102\013\075\014\071\015\101\016\077" +
    "\021\153\041\074\001\002\000\032\017\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\001\002\000\016\017\044\020" +
    "\156\031\046\032\047\036\007\040\004\001\002\000\032" +
    "\005\076\006\073\007\103\010\100\011\072\012\102\013" +
    "\075\014\071\015\101\016\077\020\160\041\074\001\002" +
    "\000\026\017\044\021\040\023\033\031\046\032\047\033" +
    "\043\035\041\036\007\037\042\040\004\001\002\000\032" +
    "\017\uffd7\021\uffd7\023\uffd7\024\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002" +
    "\000\026\017\044\021\040\023\033\031\046\032\047\033" +
    "\043\035\041\036\007\037\042\040\004\001\002\000\032" +
    "\017\uffd8\021\uffd8\023\uffd8\024\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\001\002" +
    "\000\030\017\044\021\040\023\033\024\165\031\046\032" +
    "\047\033\043\035\041\036\007\037\042\040\004\001\002" +
    "\000\032\004\067\017\ufff0\021\ufff0\023\ufff0\024\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\001\002\000\034\002\uffec\017\uffec\021\uffec\023\uffec\024" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\001\002\000\034\002\uffed\017\uffed\021" +
    "\uffed\023\uffed\024\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\006\021" +
    "\021\025\020\001\002\000\010\020\uffe7\022\uffe7\025\170" +
    "\001\002\000\004\026\171\001\002\000\006\020\uffe6\022" +
    "\uffe6\001\002\000\010\002\ufff4\036\ufff4\040\ufff4\001\002" +
    "\000\006\036\007\040\004\001\002\000\004\023\033\001" +
    "\002\000\010\002\ufff6\036\ufff6\040\ufff6\001\002\000\006" +
    "\020\uffe5\022\uffe5\001\002\000\006\020\uffe3\022\uffe3\001" +
    "\002\000\004\026\203\001\002\000\004\021\202\001\002" +
    "\000\034\002\ufff1\004\ufff1\017\ufff1\021\ufff1\023\ufff1\024" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\001\002\000\004\021\204\001\002\000\034\002" +
    "\ufff2\004\ufff2\017\ufff2\021\ufff2\023\ufff2\024\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\001" +
    "\002\000\010\002\ufffc\036\ufffc\040\ufffc\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\016\004\014\021\004\022\005\024\011\025" +
    "\007\026\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\014\021\204\022\005\024\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\014\021\015\022" +
    "\005\024\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\026\024\027\027\023\001\001\000\006\003\176" +
    "\024\027\001\001\000\002\001\001\000\004\020\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\033\001\001\000\034\004" +
    "\052\005\035\006\051\011\054\012\056\013\050\016\053" +
    "\017\060\020\044\024\034\030\036\031\047\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\162\005\035\006\051\011\054\012\056\013" +
    "\050\016\053\017\060\020\044\024\034\031\161\034\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\064\006\151\016\053\017\060\024\034\034\061\001\001" +
    "\000\002\001\001\000\016\004\064\006\135\016\053\017" +
    "\060\024\034\034\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\064\005\120\006" +
    "\051\011\054\012\056\013\050\016\053\017\060\020\044" +
    "\024\034\034\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\116\024\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\064\006\063\016\053\017\065\024\034\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\064\006\067\016\053\017\060\024\034\034" +
    "\061\001\001\000\002\001\001\000\016\004\064\006\115" +
    "\016\053\017\060\024\034\034\061\001\001\000\016\004" +
    "\064\006\114\016\053\017\060\024\034\034\061\001\001" +
    "\000\016\004\064\006\113\016\053\017\060\024\034\034" +
    "\061\001\001\000\016\004\064\006\112\016\053\017\060" +
    "\024\034\034\061\001\001\000\016\004\064\006\111\016" +
    "\053\017\060\024\034\034\061\001\001\000\016\004\064" +
    "\006\110\016\053\017\060\024\034\034\061\001\001\000" +
    "\016\004\064\006\107\016\053\017\060\024\034\034\061" +
    "\001\001\000\016\004\064\006\106\016\053\017\060\024" +
    "\034\034\061\001\001\000\016\004\064\006\105\016\053" +
    "\017\060\024\034\034\061\001\001\000\016\004\064\006" +
    "\104\016\053\017\060\024\034\034\061\001\001\000\016" +
    "\004\064\006\103\016\053\017\060\024\034\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\064" +
    "\006\133\016\053\017\060\024\034\034\061\001\001\000" +
    "\020\004\064\006\125\016\053\017\060\024\034\033\124" +
    "\034\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\064\006\132" +
    "\016\053\017\060\024\034\034\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\064\006\141\016\053\017\060\024\034\034\061" +
    "\001\001\000\002\001\001\000\030\004\064\005\143\006" +
    "\051\011\054\012\056\013\050\016\053\017\060\020\044" +
    "\024\034\034\061\001\001\000\002\001\001\000\030\004" +
    "\064\005\145\006\051\011\054\012\056\013\050\016\053" +
    "\017\060\020\044\024\034\034\061\001\001\000\002\001" +
    "\001\000\030\004\064\005\147\006\051\011\054\012\056" +
    "\013\050\016\053\017\060\020\044\024\034\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\064\006\154\016\053\017" +
    "\060\024\034\034\061\001\001\000\002\001\001\000\030" +
    "\004\064\005\156\006\051\011\054\012\056\013\050\016" +
    "\053\017\060\020\044\024\034\034\061\001\001\000\002" +
    "\001\001\000\030\004\064\005\160\006\051\011\054\012" +
    "\056\013\050\016\053\017\060\020\044\024\034\034\061" +
    "\001\001\000\002\001\001\000\030\004\064\005\120\006" +
    "\051\011\054\012\056\013\050\016\053\017\060\020\044" +
    "\024\034\034\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\175\024\027\001\001\000\004\020\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationList start_val = (DeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              DeclarationList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationList dl = (DeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              DeclarationList RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Invalid file definition", ee); 
                          RESULT = new DeclarationList(eeleft, eeright, null, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_specifier ::= INT 
            {
              TypeName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeName(ileft, iright, TypeName.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_specifier ::= VOID 
            {
              TypeName RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeName(vleft, vright, TypeName.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration_list declaration 
            {
              DeclarationList RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationList d1 = (DeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        DeclarationList t = d1;
                        while( t.tail != null)
                           t = t.tail;
                        t.tail = new DeclarationList(d2left, d2right, d2, null);
                        RESULT = d1;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= declaration 
            {
              DeclarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationList(dleft, dright, d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_list ::= COMMA declaration 
            {
              DeclarationList RESULT =null;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d3 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid decleration list comman seperation", d3);
                        RESULT = new DeclarationList(d3left, d3right, d3, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= error 
            {
              DeclarationList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Incorrect structure in the declaration_list.", e);
                        RESULT = new DeclarationList(eleft, eright, null, null);

                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= variable_declaration 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= function_declaration 
            {
              Declaration RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration fu = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_declaration ::= type_specifier ID LPAREN param_list RPAREN compound_statement 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(tleft, tright, t, i, p, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_declaration ::= type_specifier ID LPAREN VOID RPAREN compound_statement 
            {
              Declaration RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeName t2 = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c2 = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(t2left, t2right, t2, i2, null, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_declaration ::= type_specifier ID LPAREN RPAREN compound_statement 
            {
              Declaration RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeName t2 = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c3 = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(i3left, i3right, t2, i3, null, c3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declaration ::= type_specifier ID SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDeclaration(tleft, tright, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable_declaration ::= type_specifier ID LSB NUM RSB SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(nleft, nright, n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_declaration ::= type_specifier ID LSB RSB SEMI 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.report_error("Invalid array index value", i);
                     RESULT = new ArrayDec(tleft, tright, t, i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // local_declarations ::= local_declarations variable_declaration 
            {
              VarDecList RESULT =null;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList lds = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VarDecList v = lds;
                        while(v.tail != null)
                           v = v.tail;
                        v.tail = new VarDecList(vd, null);
                        RESULT = lds;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= variable_declaration 
            {
              VarDecList RESULT =null;
		int vd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd2 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(vd2, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= error variable_declaration 
            {
              VarDecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd3 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid structure in local_declarations", e);
                        RESULT = new VarDecList(vd3, null); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_statement ::= LCB local_declarations statement_list RCB 
            {
              CompoundExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(lleft, lright, ld, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_statement ::= LCB local_declarations RCB 
            {
              CompoundExp RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(l2left, l2right, ld, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compound_statement ::= LCB statement_list RCB 
            {
              CompoundExp RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl2 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(l3left, l3right, null, sl2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compound_statement ::= LCB RCB 
            {
              CompoundExp RESULT =null;
		int l4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(l4left, l4right, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_list ::= statement_list statement 
            {
              ExpList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList v = sl; 
                        while (v.tail != null)
                           v = v.tail;
                        v.tail = new ExpList(sleft, sright, s, null);
                        RESULT = sl;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_list ::= statement 
            {
              ExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(sleft, sright, s, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param ::= type_specifier ID 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(tleft, tright, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param ::= type_specifier ID LSB RSB 
            {
              VarDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeName t = (TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VariableDeclaration(tleft, tright, t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list ::= param_list COMMA param 
            {
              VarDecList RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p1 = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p2 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VarDecList t = p1;
                        while(t.tail != null)
                           t = t.tail;
                        t.tail = new VarDecList(p2, null);
                        RESULT = p1;   
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_list ::= param 
            {
              VarDecList RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p1 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(p1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param_list ::= COMMA param 
            {
              VarDecList RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p3 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Invalid param list in function", p3);
                        RESULT = new VarDecList(null, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param_list ::= error 
            {
              VarDecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        parser.report_error("Incorrect structure in param_list", e);
                        RESULT = new VarDecList(null, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= expression SEMI 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp es = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= compound_statement 
            {
              Exp RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp cs = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= selection_stmt 
            {
              Exp RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ss = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= iteration_stmt 
            {
              Exp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp is = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= return_stmt 
            {
              Exp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rs = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= SEMI 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // selection_stmt ::= IF LPAREN expression RPAREN statement 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(eleft, eright, e, s1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(eleft, eright, e, s2, s3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // selection_stmt ::= IF LPAREN RPAREN statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid If condition.", i); 
                        RESULT = new IfExp(ileft, iright, null, s1, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iteration_stmt ::= WHILE LPAREN RPAREN statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid While condition", w); 
                        RESULT = new WhileExp(wleft, wright, null, s);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return_stmt ::= RETURN expression SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(rleft, rright, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return_stmt ::= RETURN SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(rleft, rright, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= variable_declaration ASSIGN expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(vleft, vright, new VarExp(vleft, vright, v), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= var ASSIGN call 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignExp(vleft, vright, v, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression LT expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.LT, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= var ASSIGN expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignExp(vleft, vright, v, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression LTEQ expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.LTEQ, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression GT expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.GT, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression GTEQ expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.GTEQ, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression PLUS expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.PLUS, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression MINUS expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.MINUS, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression TIMES expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.TIMES, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression OVER expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.OVER, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression EQ expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.EQ, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression NOTEQ expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.NOTEQ, aa2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression ERROR expression 
            {
              Exp RESULT =null;
		int aa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aa1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aa2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid symbol in expression", e);
                        RESULT = new OpExp(aa1left, aa1right, aa1, OpExp.ERROR, aa2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= term TIMES factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, t, OpExp.MUL, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= term OVER factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var ::= ID 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SimpleVar(ileft, iright, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var ::= ID LSB expression RSB 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SimpleIndexVar(ileft, iright, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVarExp(vleft, vright, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(nleft, nright, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // call ::= ID LPAREN arg_list RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallingExp(ileft, iright, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // call ::= ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallingExp(i1left, i1right, i1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // call ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("No calling function Id", i);
                           RESULT = new CallingExp(ileft, iright, null, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arg_list ::= arg_list COMMA expression 
            {
              ExpList RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList ex1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList t = ex1;
                        while( t.tail != null)
                           t = t.tail;
                        t.tail = new ExpList(ex1left, ex1right, ex2, null);
                        RESULT = ex1;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arg_list ::= expression 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(eleft, eright, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arg_list ::= error 
            {
              ExpList RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Incorrect comma spaced delimeters", ee);
                        RESULT = new ExpList(eeleft, eeright, null, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
