Authors: Mustafa Al-Obaidi and James Lemieux

A JFlex+Cup implementation for the CM programming language.
Note: Some of the code have been taken from Professor Fei Song.

To Build the code:

In order to build the parser type make in the current directory.
This will generate an executable program called "CM".

To Build everything type the command "make"

To test source code like "1.cm", type:

    "java -cp /usr/share/java/cup.jar:. CM 1.cm"

To build the Scanner alone type "make Lexer.java" and to test the scanner only type:
    "java -classpath /usr/share/java/cup.jar:. Scanner < 1.cm"

In order to build the Parser alone type "make parser.java"  and to display the Syntax Tree type:
    "java -classpath /usr/share/java/cup.jar:. CM 1.cm -a"

In order to build the Symbol table type "make" then run the command to show the errors/typechecking:
    "java -classpath /usr/share/java/cup.jar:. CM 1.cm -s"

In order to convert code to assembley type this command:
    "java -classpath /usr/share/java/cup.jar:. CM $1.cm -c"


Test Files:
Some test files are provided with the submission which are 1.cm, 2.cm, 3.cm, 4.cm and 5.cm. Each test file covers different aspect of the program. Also, there are two additional files that can be tested which are fac.cm and gcd.cm

in order to test the files you can type this command: *REMEMBER TO MAKE FIRST!*
"make testSym n=[1..5]" where n is the file number, for example if you want to run 2.cm you can type "make testSym n=2". This will output a ".sym" file that is the output of the Symbol table! Note: the name of the ".sym" file is the same as the name of the input file!

Limitations C1: While many cases are covered in the Parser, there might be some errors that are not caught by our Parser, and this could be improved in the futute.

Limitations C2:
We assumed that the variables can be accepted as void from the parser. We then did the type checking in this portion of the checkpoint. If a variable is defined as void then we return an error. When said void variable is used in any other expression then errors will be thrown in each case.

Limitations C3:
We also assumed that we are still allowed to print semantic errors when running the -c flag. As we currently are only handling the prelude and the finale, there is no need to stop assembly conversion if a file is invalid or contains errors. Limitations from C1 and C2 still apply for this checkpoint!